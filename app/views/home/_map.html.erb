
<script src='https://api.mapbox.com/mapbox-gl-js/v1.8.0/mapbox-gl.js'></script>
<link href='https://api.mapbox.com/mapbox-gl-js/v1.8.0/mapbox-gl.css' rel='stylesheet' />

<script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.2/mapbox-gl-geocoder.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.min.js"></script>

<script src='https://api.mapbox.com/mapbox.js/plugins/turf/v3.0.11/turf.min.js'></script>


<div id='map'></div>
<div class = "geocoder" id ="geocoder"></div>

<div class = "toggleSwitch">
    <nav id="filter-group" class="filter-group" id="toggle-buttons"></nav>
    <div class = "filter-group-toggle"></div>
</div>

<div class = "view-change">
    <%= image_tag "satellite-dish.svg", size: "21x21", class: "custom-icons" %>
</div>

<div class="slider close">
    <div class="rounded-box">

    <div class = "text-center">
        <button id="expandthis" class="btn btn-info ">See More</button>
        <button id="exitthis" class="btn btn-danger ">Close</button>
    </div>

    
    
    <div id="searchInfo" data-turbolinks="false"></div>
    
    <p></p>

    <div class = "container">
        <div class = "feedback-area">
        <%= render partial: 'feedbacks/form', locals: {feedback: Feedback.new}  %>
        </div>
    </div>
     
    </div>  
</div>  

<script data-no-turbolink="true">
    
    $(".filter-group-toggle").click(function(){
        $(".toggleSwitch").toggleClass("close");      
    });

    mapboxgl.accessToken = 'pk.eyJ1Ijoibm9zc3UzNzUxIiwiYSI6ImNrNzRxbHo3bzA4MW4zZm8zdmxpZ294MzEifQ.HcBzxOgPOrQHFhplZ0FuXQ';

    var sen = <%= raw render template: "sensors/index.json.jbuilder" %>
    var layerInfo = <%= raw render template: "home/index.json.jbuilder" %>
    var neighborhood = <%= raw render template: "home/neighborhoods.json" %>
    var layer_ids = ["sensor_loc", "unclustered-point", "sensor_loc_count", "neighborhood_fill", "neighborhood_line"]
    var filterGroup = document.getElementById('filter-group');
    var infoClosed = true;
    var sensor_list = ['camera','air_quality','other_sensor','counter','antenna'];
    var style_index = 0;
    var map_style = [
        'mapbox://styles/nossu3751/ck757utxk36gn1io7vjmmmrnh',
        'mapbox://styles/nossu3751/ck8l8v9010hj41jo06o6r9673'
    ];
        
    var map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/nossu3751/ck757utxk36gn1io7vjmmmrnh',
        center: [-71.057991, 42.360405],
        zoom: 10,
        minZoom: 10,
        maxZoom: 20,
        maxBounds: [[-71.194540,42.216314],[-70.920614,42.409770]]
    });

    map.addControl(new mapboxgl.NavigationControl(), 'top-right');
    map.on('style.load', function() {
        if(map.getSource("sensor_loc") == undefined){
            map.addSource('sensor_loc', {
                type: 'geojson',
                data: sen,
            });
        };

        if(map.getSource("neighborhood_loc") == undefined){
            map.addSource('neighborhood_loc', {
                type: 'geojson',
                data: neighborhood
            });
        };

        circle_radius = [
            "interpolate", ["linear"], ["zoom"],               
            11, 1.5,
            13, 3,
            15, 5,
            18, 7,
            20, 9
        ]  

        if(map.getLayer("camera") == undefined){
            map.addLayer({
                id: 'camera',
                type: 'circle',
                source: 'sensor_loc',
                filter: ['==', 'sensor_type', 'camera'],
                paint:{
                    'circle-color':'#11b4da',
                    'circle-radius': circle_radius
                },
                layout:{
                    visibility: 'visible'
                }
            });
        };

        if(map.getLayer("antenna") == undefined){
            map.addLayer({
                id: 'antenna',
                type: 'circle',
                source: 'sensor_loc',
                filter: ['==', 'sensor_type', 'antenna'],
                paint:{
                    'circle-color':'#0fc71f',
                    'circle-radius': circle_radius
                },
                layout:{
                    visibility: 'visible'
                }
            });
        };

        if(map.getLayer("counter") == undefined){
            map.addLayer({
                id: 'counter',
                type: 'circle',
                source: 'sensor_loc',
                filter: ['==', 'sensor_type', 'counter'],
                paint:{
                    'circle-color':'#fb4d42',
                    'circle-radius': circle_radius
                },
                layout:{
                    visibility: 'visible'
                }
            });
        };
        
        if(map.getLayer("air_quality") == undefined){
            map.addLayer({
                id: 'air_quality',
                type: 'circle',
                source: 'sensor_loc',
                filter: ['==', 'sensor_type', 'air quality'],
                paint:{
                    'circle-color':'#b23ff3',
                    'circle-radius': circle_radius
                },
                layout:{
                    visibility: 'visible'
                }
            });
        };
            
        if(map.getLayer("other_sensor") == undefined){
            map.addLayer({
               id: 'other_sensor',
                type: 'circle',
                source: 'sensor_loc', 
                filter: ["all",
                    ['!=', 'sensor_type','air quality'],
                    ['!=', 'sensor_type','camera'],
                    ['!=', 'sensor_type','antenna'],
                    ['!=', 'sensor_type','counter']
                ],                 
                 paint: {
                     'circle-color': '#d7d3c1',      
                     'circle-radius': [
                         "interpolate", ["linear"], ["zoom"],               
                         11, 1.5,
                         13, 3,
                         15, 5,
                         18, 7,
                         20, 9
                     ]   
                 },
                 layout:{
                    visibility: 'visible'
                }
             })
        };
            
        if(map.getLayer("neighborhood_fill") == undefined){
            map.addLayer({
                'id': 'neighborhood_fill',
                'type': 'fill',
                'source' : 'neighborhood_loc',
                'layout': {},
                'paint': {
                    'fill-color': '#f27373',
                    'fill-opacity': 0.1
                },
                layout:{
                    visibility: 'visible'
                }
            })
        };

        if(map.getLayer("neighborhood_line") == undefined){
            map.addLayer({
                'id': 'neighborhood_line',
                'type': 'line',
                'source' : 'neighborhood_loc',
                'paint': {
                    'line-color': 'rgba(255, 0, 0, 1)',
                    'line-width': 3,
                    'line-opacity': 0.2
                },
                layout:{
                    visibility: 'visible'
                }
            })
        };

        neighborhood_sensors = {};
        
        neighborhood.features.forEach(function(e){
            name = e.properties.Name;
            n_sensors = [];
            content = "<table style='width:100%'><tr><th style='text-align:center'>Sensor ID</th><th style='text-align:center'>Sensor Type</th></tr>";
            sen.features.forEach(function(s){
                if(turf.inside(s,e)){
                    n_sensors.push(s.properties.sensor_id);
                    content += "<tr><td>" +  s.properties.sensor_id + "</td><td>" + s.properties.sensor_type + "</td></tr>"
                }
            });
            neighborhood_sensors[name] = [content, n_sensors];
        });

        layerInfo.layers.forEach(function(li){
            var liid= "#"+li.layerID;
            if((filterGroup.querySelector(liid) == null)){
 
                var img = document.createElement('img');
                img.src = 'assets/' + li.layerID + '.svg';
                img.className = 'toggle_icon_img';

                var divElem = document.createElement('div');
                divElem.className = 'toggle_icon clicked';
                divElem.id = li.layerID;
                divElem.appendChild(img);

                filterGroup.appendChild(divElem);

                divElem.addEventListener('click', function(e){
                    var visibility = map.getLayoutProperty(li.layerID,'visibility');
                    map.setLayoutProperty(
                        li.layerID,
                        'visibility',
                        (visibility == 'visible') ? 'none' : 'visible'
                    );
                    if(visibility == 'visible'){    
                        $("#"+li.layerID).removeClass('clicked');
                    }else{
                        $("#"+li.layerID).addClass('clicked');
                    }
                });

            }else{
                if(!$("#"+li.layerID).hasClass('clicked')){
                    $("#"+li.layerID).addClass('clicked');
                } 
            }
                           
        });         
    });

    map.on('click', 'neighborhood_fill', function(e) {
        geocoder._removeMarker();
        holo = e.features[0];
        $.ajax({
            success: function() {
                $('.slider').toggleClass('close', infoClosed);
                infoClosed = false;
                sensors_inside = neighborhood_sensors[holo.properties.Name];
                if(sensors_inside[1].length != 0){
                    $('#searchInfo').html(                              
                        "<p><h1>" + holo.properties.Name + "</h1></p>" +
                        neighborhood_sensors[holo.properties.Name][0]
                    );
                }else{
                    $('#searchInfo').html(                              
                        "<p><h1>" + holo.properties.Name + "</h1></p>" +
                        "<p> Sorry! We don't have any sensors here yet. </p>"
                    );
                }           
            }
        })      
    });


    map.on('mouseenter', 'neighborhood_fill', function() {
        map.getCanvas().style.cursor = 'pointer';
    });
    
    map.on('mouseleave', 'neighborhood_fill', function() {
        map.getCanvas().style.cursor = '';
    });
    
    
    sensor_list.forEach(function(s){
        map.on('click', s, function(e) {
            
            geocoder._removeMarker();
            var holo=e.features[0];
            map.flyTo({center: holo.geometry.coordinates});
            var defaultMarkerOptions = {
                color: '#FB4D42'
            }
            var markerOptions = $.extend({}, defaultMarkerOptions, geocoder.options.marker)
            geocoder.mapMarker = new geocoder._mapboxgl.Marker(markerOptions);
            geocoder.mapMarker.setLngLat(holo.geometry.coordinates).addTo(geocoder._map);

            $.ajax({
                success: function() {
                    $('.slider').toggleClass('close', infoClosed);
                    infoClosed = false;

                    $.ajax({
                        url:"/sensor_info",
                        type: "GET",
                        data: {si: holo.properties.sensor_id}
                    });
                },
                error:function(){
                    alert('Error');
                }
            })
        });
    });

    map.on('mouseenter', 'unclustered-point', function() {
        map.getCanvas().style.cursor = 'pointer';
    });
    
    map.on('mouseleave', 'unclustered-point', function() {
        map.getCanvas().style.cursor = '';
    });

    $('#exitthis').click(function(){
        geocoder._removeMarker();
        $.ajax({
            success: function(){
                $('.slider').toggleClass('close');
                if ($('.slider').hasClass("see-more")){
                    $('.slider').toggleClass("see-more");
                    $('#expandthis').text("See More");
                }
                infoClosed = true;
            }
        })
        
    });

    $('#expandthis').click(function(){
        $.ajax({
            success: function(){
                $('.slider').toggleClass('see-more');
                $('#expandthis').text(function(i, text){
                    return text === "See More" ? "See Less" : "See More";
                })
            }
        }) 
    });

    $('.view-change').click(function(){
        $('.view-change').toggleClass('clicked');
        style_index = (style_index == 0)?1:0;
        map.setStyle(map_style[style_index]);
    });

    var forwardGeocoder =(query)=> {
        var matchingFeatures = [];
        for (var i = 0; i < sen.features.length; i++){
            var feature = sen.features[i];
            if(feature.properties.sensor_id.toString().toLowerCase().search(query.toLowerCase()) !== -1){
                feature['place_name'] = '📷 sensor ' + feature.properties.sensor_id;
                feature['center'] = feature.geometry.coordinates;
                feature['place_type'] = ['sensor'];
                matchingFeatures.push(feature);
            }
        }
        return matchingFeatures;
    }
    
    var geocoder = (
        new MapboxGeocoder({
            accessToken: mapboxgl.accessToken,
            localGeocoder: forwardGeocoder,
            marker: true,
            mapboxgl: mapboxgl,
            placeholder: 'Search for places near City of Boston',
            bbox: [-71.194540,42.216314,-70.920614,42.409770],
            proximity: {
                longitude: -71.057991,
                latitude: 42.360405
            }
        })
    );

    document.getElementById('geocoder').appendChild(geocoder.onAdd(map));

    

    geocoder._inputEl.addEventListener('change',function(){
        $.ajax({
            success: function(){
                
                $('.slider').toggleClass('close', infoClosed);
                infoClosed = false;
                if(geocoder._typeahead.selected == null){
                    return;
                }
                if(geocoder._typeahead.selected.place_type == "sensor"){
        
                    $.ajax({
                        url:"/sensor_info",
                        type: "GET",
                        data: {si: geocoder._typeahead.selected.properties.sensor_id}
                    });
                
                }else{
                    $('#searchInfo').html(
                        "<p>" + geocoder._typeahead.selected.place_name + "<p>" +
                        "<p>" + geocoder._typeahead.selected.center.toString() + "<p>"
                    )
                }
            }
        });
    });


    function fly(coord) {
        setTimeout(function() { map.flyTo([coord[1], coord[0]], 16) }, 0);
    };

    map.addControl(
        new mapboxgl.GeolocateControl({
            positionOptions: {
                enableHighAccuracy: true,
                timeout: 5000
            },
            trackUserLocation: true,
            showUserLocation: true,
            showAccuracyCircle: true
        })
    );


</script>





