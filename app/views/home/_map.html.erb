
    <div class="mapcontainer">
    <script src='https://api.mapbox.com/mapbox-gl-js/v1.8.0/mapbox-gl.js'></script>
    <link href='https://api.mapbox.com/mapbox-gl-js/v1.8.0/mapbox-gl.css' rel='stylesheet' />
    
    <script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.2/mapbox-gl-geocoder.min.js"></script>
    <link
    rel="stylesheet"
    href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.2/mapbox-gl-geocoder.css"
    type="text/css"/>

    
    
    <script src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.min.js"></script>
    

    <script src='https://api.mapbox.com/mapbox.js/plugins/turf/v3.0.11/turf.min.js'></script>




    <div id='map'></div>
    <nav id="filter-group" class="filter-group"></nav>
    <script>
        mapboxgl.accessToken = 'pk.eyJ1Ijoibm9zc3UzNzUxIiwiYSI6ImNrNzRxbHo3bzA4MW4zZm8zdmxpZ294MzEifQ.HcBzxOgPOrQHFhplZ0FuXQ';

        var sen = <%= raw render template: "sensors/index.json.jbuilder" %>
        var layerInfo = <%= raw render template: "home/index.json.jbuilder" %>
        var neighborhood = 'https://gist.githubusercontent.com/nossu3751/3a92073b0333314e360185906d56772f/raw/3e86f1b621080aa431593b334114d4c0f9479b71/neighborhoods.geojson'

        var layer_ids = ["sensor_loc", "unclustered-point", "sensor_loc_count", "neighborhood_fill", "neighborhood_line"]

        var filterGroup = document.getElementById('filter-group');

        var map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/nossu3751/ck757utxk36gn1io7vjmmmrnh/draft',
            center: [-71.057991, 42.360405],
            zoom: 10,
            minZoom: 10,
            maxZoom: 20
        });

        map.on('load', function() {
            map.addSource('sensor_loc', {
                type: 'geojson',
                data: sen,
                cluster: true,
                clusterMaxZoom: 15,
                clusterRadius: 50
            });
            map.addSource('neighborhood_loc', {
                type: 'geojson',
                data: neighborhood
            });
            map.addLayer({
                id: 'sensor_loc',
                type: 'circle',
                source: 'sensor_loc',
                filter: ['has','point_count'],
                paint: {
                    'circle-color': [
                        'step',
                        ['get', 'point_count'],
                        '#FEBCFF',
                        5,
                        '#51bbd6',
                        20,
                        '#f1f075',
                        50,
                        '#f28cb1',
                        80,
                        '#51bbd6',
                        120,
                        '#f1f075',
                        200,
                        '#f1f075',
                    ],
                    'circle-radius': [
                        'step',
                        ['get', 'point_count'],
                        20,
                        5,
                        80,
                        20,
                        120,
                        50,
                        180,
                        80,
                        270,
                        120,
                        350,
                        200,
                        400
                    ],
                    'circle-opacity': 0.3
                }    
            });
            map.addLayer({
                id: 'unclustered-point',
                type: 'circle',
                source: 'sensor_loc',
                filter: ['!', ['has', 'point_count']],
                paint: {
                    'circle-color': '#11b4da',
                    'circle-radius': 7,
                    
                }
            });
            map.addLayer({
                id: 'sensor_loc_count',
                type: 'symbol',
                source: 'sensor_loc',
                filter: ['has','point_count'],
                layout: {
                    'text-field': '{point_count_abbreviated}',
                    'text-font': ['Montserrat SemiBold', 'Arial Unicode MS Bold'],
                    'text-size': 24
                }          
            });
            map.addLayer({
                'id': 'neighborhood_fill',
                'type': 'fill',
                'source' : 'neighborhood_loc',
                'layout': {},
                'paint': {
                    'fill-color': '#f27373',
                    'fill-opacity': 0.2
                }
            });
            map.addLayer({
                'id': 'neighborhood_line',
                'type': 'line',
                'source' : 'neighborhood_loc',
                'paint': {
                    'line-color': 'rgba(255, 0, 0, 1)',
                    'line-width': 2
                }
            });

            map.on('click', 'neighborhood_fill', function(e) {
                var sensorsWithin = []
                var holo=e.features[0];

                sen.features.forEach(function(s){
                    if(turf.inside(s,holo)){
                        sensorsWithin.push(s.properties.sensor_id)
                    }
                })

                $.ajax({
                    success: function() {
                        $('#neighborhoodInfo').html(
                       
                            "Neighborhood Name: "+holo.properties.Name+ ", Sensors in the Neighborhood: " +sensorsWithin
                
                        );
                        $('#sensorInfo').html('')
                    }
                })
            });
            
            map.on('mouseenter', 'neighborhood_fill', function() {
                map.getCanvas().style.cursor = 'pointer';
            });
            
            map.on('mouseleave', 'neighborhood_fill', function() {
                map.getCanvas().style.cursor = '';
            });

            map.on('click', 'unclustered-point', function(e) {
                var holo=e.features[0];
                $.ajax({
                success: function() {
                    $('#neighborhoodInfo').html('');
                    $('#sensorInfo').html(e.lngLat+"Ownership: "+ holo.properties.ownership+"Sensor Type: "+holo.properties.sensor_type)
                }
            })
            });


            map.on('mouseenter', 'unclustered-point', function() {
                map.getCanvas().style.cursor = 'pointer';
            });
            
            map.on('mouseleave', 'unclustered-point', function() {
                map.getCanvas().style.cursor = '';
            });


            layerInfo.layers.forEach(function(li){
                var input = document.createElement('input');
                input.type = 'checkbox';
                input.id = li.layerID;
                input.checked = true;
                filterGroup.appendChild(input);

                var label = document.createElement('label');
                label.setAttribute('for', li.layerID);
                label.textContent = li.layerName;
                filterGroup.appendChild(label);

                input.addEventListener('change', function(e) {
                    map.setLayoutProperty(
                        li.layerID,
                        'visibility',
                        e.target.checked ? 'visible' : 'none'
                    );
                });
            })
        });

        
    
        
        
    </script>

    
    
    




    <script>
    var coordinatesGeocoder = function(query) {
        
        var matches = query.match(
        /^[ ]*(?:Lat: )?(-?\d+\.?\d*)[, ]+(?:Lng: )?(-?\d+\.?\d*)[ ]*$/i
        );
        if (!matches) {
        return null;
        }
         
        function coordinateFeature(lng, lat) {
        return {
        center: [lng, lat],
        geometry: {
        type: 'Point',
        coordinates: [lng, lat]
        },
        place_name: 'Lat: ' + lat + ' Lng: ' + lng,
        place_type: ['coordinate'],
        properties: {},
        type: 'Feature'
        };
        }
         
        var coord1 = Number(matches[1]);
        var coord2 = Number(matches[2]);
        var geocodes = [];
         
        if (coord1 < -90 || coord1 > 90) {
        
        geocodes.push(coordinateFeature(coord1, coord2));
        }
         
        if (coord2 < -90 || coord2 > 90) {
        
        geocodes.push(coordinateFeature(coord2, coord1));
        }
         
        if (geocodes.length === 0) {
       
        geocodes.push(coordinateFeature(coord1, coord2));
        geocodes.push(coordinateFeature(coord2, coord1));
        }
         
        return geocodes;
        };

    </script>









    


    <script>
    
    var geocoder = (
        new MapboxGeocoder({
        accessToken: mapboxgl.accessToken,
        localGeocoder: coordinatesGeocoder,
        mapboxgl: mapboxgl,
        placeholder: 'Search for places near City of Boston',
        bbox: [-71.26489546844812,42.24178291945654,-70.96325801708184,42.4569738383322],
        proximity: {
            longitude: -71.057991,
            latitude: 42.360405
        }
        })
    );
    map.addControl(geocoder);

    console.log(geocoder.query("Boston"));
    </script>



</div>

